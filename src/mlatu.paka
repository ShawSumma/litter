import("../paka/lang/io.paka")

macro term {
    word
    quote
}

def term_make_word(name) {
    return [term.word, name]
}

def term_make_quote(name) {
    return [term.quote, name]
}

def rule_new(redex, reduction) {
    return [redex, reduction]
}

def is_letter(chr) {
    if chr < 'a' {
        return false
    }
    if chr > 'z' {
        return false
    }
    return true
}

def is_stop(chr) {
    if chr == '(' {
        return true
    }
    if chr == ')' {
        return true
    }
    if chr == ';' {
        return true
    }
    if chr == '=' {
        return true
    }
    return false
}

def parse_word(stream) {
    if length(stream[0]) <= stream[1] {
        return none
    }
    first = stream[0][stream[1]]
    stream[1] = stream[1] + 1
    if first == ' ' {
        parse_word(stream)
    }
    if first == 10 {
        parse_word(stream)
    }
    ret = [first]
    while true {
        if length(stream[0]) <= stream[1] {
            return term_make_word(ret)
        }
        peek = stream[0][stream[1]]
        if is_stop(peek) {
            return term_make_word(ret)
        }
        if peek == ' ' {
            return term_make_word(ret)
        }
        if peek == 10 {
            return term_make_word(ret)
        }
        ret ~= [peek]
        stream[1] = stream[1] + 1
    }
}

def strip(stream) {
    while true {
        if length(stream[0]) <= stream[1] {
            return none
        }
        first = stream[0][stream[1]]
        if first == ' ' {
            stream[1] = stream[1] + 1
        } else {
            if first == 10 {
                stream[1] = stream[1] + 1
            } else {
                return none
            }
        }
    }
}

def parse_term(stream) {
    strip(stream)
    first = stream[0][stream[1]]
    if first == '(' {
        words = []
        stream[1] = stream[1] + 1
        strip(stream)
        first = stream[0][stream[1]]
        while first != ')' {
            words ~= [parse_term(stream)]
            strip(stream)
            if length(stream[0]) <= stream[1] {
                println("unclosed parens")
            }
            first = stream[0][stream[1]]
        }
        stream[1] = stream[1] + 1
        return term_make_quote(words)
    } else {
        return parse_word(stream)
    }
}

def parse_terms(stream) {
    ret = []
    while true {
        strip(stream)
        if length(stream[0]) <= stream[1] {
            return ret
        }
        first = stream[0][stream[1]]
        if first == none {
            return ret
        }
        if first == ';' {
            return ret
        }
        if first == '=' {
            return ret
        }
        ret ~= [parse_term(stream)]
    }
}

def parse_rule(stream) {
    redex = parse_terms(stream)
    strip(stream)
    stream[1] = stream[1] + 1
    reduction = parse_terms()
    strip(stream)
    stream[1] = stream[1] + 1
    return rule_new(redex, reduction)
}

def parse_rules(stream) {
    ret = []
    while true {
        strip(stream)
        if length(stream[0]) <= stream[1] {
            return ret
        }
        rule = parse_rule(stream)
        if rule == none {
            return ret
        }
        ret ~= [rule]
    }
}

def rules(src) {
    return parse_rules([src, 0])
}

def parse(src) {
    return parse_terms([src, 0])
}

def rewrite1(rules, list, index) {
    matching = []
    nrule = 0
    while nrule < length(rules) {
        rule = rules[nrule]
        depth = 0
        nterm = 0
        got_to_end = true
        while nterm < length(rule[0]) {
            term = rule[0][nterm]
            if index >= depth {
                if term == list[index - depth] {
                    depth = depth + 1
                } else {
                    nterm = length(rule[0])
                    got_to_end = false
                }
            } else {
                nterm = length(rule[0])
                got_to_end = false
            }
            nterm = nterm + 1
        }
        if got_to_end {
            matching ~= [[depth - 1, rule[1]]]
        }
        nrule = nrule + 1
    }
    return matching
}

def by_min0(matching) {
    ret = none
    index = 0
    while index < length(matching) {
        cur = matching[index]
        if ret == none {
            ret = cur
        } else {
            if ret[0] <= cur[0] {
                ret = cur
            }
        }
        index = index + 1
    }
    return ret
}

def remove(list, index) {
    ret = []
    i = 0
    while i < length(list) {
        if i != index {
            ret ~= [list[i]]
        }
        i = i + 1
    }
    return ret
}

def insert(list, index, value) {
    ret = []
    i = 0
    while i < length(list) {
        if i == index {
            ret ~= [value]
        }
        ret ~= [list[i]]
        i = i + 1
    }
    if index == length(list) {
        ret ~= [value]
    }
    return ret
}

def rewrite(rules, list) {
    index = length(list) - 1
    while true {
        matching = rewrite1(rules, list, index)
        if length(matching) != 0 {
            pair = by_min0(matching)
            depth = pair[0]
            reduction = pair[1]
            i = 0
            while i <= depth {
                list = remove(list, index - depth)
                i = i + 1
            }
            i = length(reduction)
            while i > 0 {
                i = i - 1
                list = insert(list, index - depth, reduction[i])
            }
            if length(list) == 0 {
                return list
            }
            index = length(list)
        } else {
            if index == 0 {
                return list
            }
            cur = list[index]
            if cur[0] == term.word {
                if cur[1] == "u" {
                    second = list[index - 1]
                    if second[0] == term.quote {
                        q = second[1]
                        list = remove(list, index)
                        list = remove(list, index - 1)
                        iterm = length(q)
                        while iterm > 0 {
                            iterm = iterm - 1
                            term = q[iterm]
                            list = insert(list, index - 1, term)
                        }
                        if length(list) == 0 {
                            return list
                        }
                        index = length(list)
                    }
                }
                if index > 1 {
                    if cur[1] == "c" {
                        v1 = list[index - 1]
                        v2 = list[index - 2]
                        if v1[0] == term.quote {
                            if v1[0] == term.quote {
                                list = remove(list, index)
                                list = remove(list, index - 1)
                                list[index - 2] = term_make_quote(v2[1] ~ v1[1])
                                index = length(list)
                            }
                        }
                    }
                    if cur[1] == "s" {
                        list = remove(list, index)
                        v1 = list[index - 1]
                        v2 = list[index - 2]
                        list[index - 1] = v2
                        list[index - 2] = v1
                        index = length(list)
                    }
                }
                if cur[1] == "q" {
                    list = remove(list, index)
                    list[index - 1] = term_make_quote([list[index - 1]])
                    index = length(list)
                }
                if cur[1] == "r" {
                    list = remove(list, index)
                    list = remove(list, index - 1)
                    if length(list) == 0 {
                        return list
                    }
                    index = length(list)
                }
                if cur[1] == "d" {
                    list[index] = list[index - 1]
                    index = length(list)
                }
            }
        }
        index = index - 1
    }
}

def test(rules, src, goal) {
    got = rewrite(rules, parse(src))
    want = parse(goal)
    if want != got {
        println(" --- fail --- ")
        print("case: ")
        println(src)
        print("want: ")
        println(want)
        print("got : ")
        println(got)
    } else {
        print("pass: ")
        println(src)
    }
}

def put_term(term) {
    if term[0] == term.word {
        put(term[1])
    } 
    if term[0] == term.quote {
        put("(")
        i = 0
        while i < length(term[1]) {
            if i != 0 {
                put(" ")
            }
            put_term(term[1][i])
            i = i + 1
        }
        put(")")
    }
}

def put_terms(terms) {
    i = 0
    while i < length(terms) {
        if i != 0 {
            put(" ")
        }
        put_term(terms[i])
        i = i + 1
    }
}

def test_all() {
    test([], "x d", "x x")
    test([], "x d y", "x x y")
    test([], "x y d", "x y y")
    test([], "x y d z", "x y y z")
    test([], "d", "d")
    
    test([], "x y s", "y x")
    test([], "x y z s", "x z y")
    test([], "x y s z", "y x z")
    test([], "s", "s")
    test([], "x s", "x s")
    
    test([], "x r", "")
    test([], "x y r", "x")
    test([], "x y r z", "x z")
    test([], "r", "r")
    
    test([], "x q", "(x)")
    test([], "x y q", "x (y)")
    test([], "x q y", "(x) y")
    test([], "x y q z", "x (y) z")
    test([], "q", "q")
    
    test([], "() u", "")
    test([], "x () u", "x")
    test([], "() u y", "y")
    test([], "x () u y", "x y")
    test([], "(y) u", "y")
    test([], "x (y) u", "x y")
    test([], "(x) u y", "x y")
    test([], "x (y) u z", "x y z")
    test([], "(x y z) u", "x y z")
    test([], "u", "u")
    
    test([], "() () c", "()")
    test([], "(x) () c", "(x)")
    test([], "() (y) c", "(y)")
    test([], "(x) (y) c", "(x y)")
    test([], "c", "c")
    test([], "(x) c", "(x) c")
    
    vrules = rules("x = y z ; x x = aaaaaaaaa; ")
    test(vrules, "x", "y z")
    test(vrules, "a x", "a y z")
    test(vrules, "x a", "y z a")
    test(vrules, "a x b", "a y z b")
    test(vrules, "x x", "aaaaaaaaa")
}

def meval(rules, src) {
    res = rewrite(rules, parse(src))
    put_terms(res)
    puts("")
}

## test_all()
def main(args) {
    i = 0
    while i < length(args) {
        meval("", args[i])
        i = i + 1
    }
}

main(args)
